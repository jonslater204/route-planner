<!DOCTYPE html>
<html>
<head>
<title>Route Planner</title>
<style type="text/css">
#map-canvas {
   width: 640px;
   height: 480px;
}
</style>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
<script type="text/javascript" src="//maps.googleapis.com/maps/api/js?libraries=geometry,drawing&amp;key=AIzaSyDWaCjt39pWuVfV78JixAWj99htbn2sutc"></script>
<script type="text/javascript">
var map;
var drawingManager;
var route_id;
var load_route;
var points = [];
var markers = [];
var polyline = new google.maps.Polyline({
   path: [],
   strokeColor: 'red',
   strokeOpacity: .5,
   strokeWeight: 5,
   editable: true
});
var progress_points;
var progress_line = new google.maps.Polyline({
   path: [],
   strokeColor: 'yellow',
   strokeOpacity: .75,
   strokeWeight: 4
});
var distance;
function distance_format(d) {
   if (document.getElementById('js-unit').value === 'km') {
      if (d < 1000) {
         return Math.round(d) + ' m';
      } else {
         return Math.round(d / 1000) + ' km';
      }
   } else {
      d = d * 1.0936133;
      if (d < 1760) {
         return Math.round(d) + ' yards';
      } else {
         return Math.round(d / 1760) + ' miles';
      }
   }
}
function loadRoutes() {
   $.ajax('maps.php', {
      data: {op: 3},
      type: 'post',
      dataType: 'json'
   })
   .done(function(data) {
      if (data.response === 'loaded') {
         var routes = [];
         for (var i in data.routes) {
            routes.push('<p><a id="js-route' + data.routes[i].routeid
               + '" class="js-load" href="#">' + data.routes[i].name + '</a></p>');
         }
         $('#js-routes').html(routes.join("\r\n"));
      }
   })
   .fail(function() {
      $('#js-routes').html('<p>Failed to load routes</p>');
   });
}
function loadRoute(r) {
   load_route = r;
   $('#js-message').text('Loading...');
   $.ajax('maps.php', {
      data: {op: 2, routeid: r},
      type: 'post',
      dataType: 'json'
   })
   .done(function(data) {
      if (data.response === 'loaded') {
         points = google.maps.geometry.encoding.decodePath(data.route.route);
         clearMarkers();
         for (var i=0; i<points.length; ++i) {
            if (i === 0 || i === points.length - 1) {
               marker = new google.maps.Marker({
                  map: map,
                  title: (i === 0) ? 'Start' : 'Finish',
                  position: points[i],
                  draggable: true
               });
               markers.push(marker);
            }
         }
         $('#js-message').text('');
         $('#js-name').val(data.route.name);
         $('#js-unit').val((data.route.unit*1 === 1) ? 'km' : 'miles');
         $('#js-progress').val(data.route.progress);
         redrawLine();
         zoomFit();
         route_id = data.route.routeid;
         drawingManager.setOptions({
            drawingMode: null
         });
      } else {
         $('#js-message').text((load_route === 0) ? '' : 'Load failed');
      }
   })
   .fail(function() {
      $('#js-message').text((load_route === 0) ? '' : 'Load failed');
   });
}
function zoomFit() {
   var bounds = new google.maps.LatLngBounds();
   for (var i=0; i<points.length; ++i) {
      bounds.extend(points[i]);
   }
   map.fitBounds(bounds);
}
function clearMarkers() {
   for (var i in markers) {
      markers[i].setMap(null);
   }
   markers = [];
}
function updateMarkers() {
   points = polyline.getPath().getArray();
   if (markers.length > 0) {
      markers[0].setPosition(points[0]);
      if (markers.length > 1) {
         markers[1].setPosition(points[points.length - 1]);
      }
   }
}
function redrawProgress() {
   if (progress_line !== null) progress_line.setMap(null);
   var progress = document.getElementById('js-progress').value * 1000;
   if (document.getElementById('js-unit').value !== 'km') progress *= 1.609344;
   if (progress == 0) return;
   progress_points = [points[0]];
   for (var i=1; i<points.length; ++i) {
      progress -= google.maps.geometry.spherical.computeDistanceBetween (points[i], points[i - 1]);
      if (progress >= 0) {
         progress_points.push(points[i]);
         if (progress < 1) break;
      } else {
         var lat_diff = points[i].lat() - points[i - 1].lat();
         var lng_diff = points[i].lng() - points[i - 1].lng();
         var section = google.maps.geometry.spherical.computeDistanceBetween (points[i], points[i - 1]);
         progress_points.push(new google.maps.LatLng(points[i].lat() + lat_diff * progress / section,
            points[i].lng() + lng_diff * progress / section));
         break;
      }
   }
   progress_line.setPath(progress_points);
   progress_line.setMap(map);
}
function redrawLine() {
   if (polyline !== null) polyline.setMap(null);
   distance = 0;
   if (points.length > 1) {
      polyline.setPath(points);
      polyline.setMap(map);
      for (var i=1; i<points.length; ++i) {
         distance += google.maps.geometry.spherical.computeDistanceBetween (points[i], points[i - 1]);
      }
   }
   var path = polyline.getPath();
   google.maps.event.addDomListener(path, 'insert_at', function() {
      updateMarkers();
      redrawLine();
   });
   google.maps.event.addDomListener(path, 'set_at', function() {
      updateMarkers();
      redrawLine();
   });
   document.getElementById('js-distance').innerHTML = distance_format(distance);
   redrawProgress();
}
function initialize() {
   var mapOptions = {
      center: { lat: 53, lng: 0 },
      zoom: 8
   };
   map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
   var drawOptions = {
      drawingMode: google.maps.drawing.OverlayType.MARKER,
      drawingControl: true,
      drawingControlOptions: {
         position: google.maps.ControlPosition.TOP_CENTER,
         drawingModes: [google.maps.drawing.OverlayType.MARKER]
      }
   };
   drawingManager = new google.maps.drawing.DrawingManager(drawOptions);
   drawingManager.setMap(map);
   google.maps.event.addListener(drawingManager, 'markercomplete', function(marker) {
      if (markers.length === 2) {
         var old_marker = markers.pop();
         old_marker.setMap(null);
      }
      marker.setTitle((markers.length === 0) ? 'Start' : 'Finish');
      points.push(marker.getPosition());
      markers.push(marker);
      redrawLine();
   });
   google.maps.event.addDomListener(document.getElementById('js-zoom'), 'click', function() {
      zoomFit();
   });
   google.maps.event.addDomListener(document.getElementById('js-delete'), 'click', function() {
      if (points.length <= 2) {
         var marker = markers.pop();
         marker.setMap(null);
      }
      points.pop();
      markers[markers.length - 1].setPosition(points[points.length - 1]);
      redrawLine();
   });
   google.maps.event.addDomListener(document.getElementById('js-clear'), 'click', function() {
      clearMarkers();
      points = [];
      redrawLine();
   });
   $('.js-load').click(function(e) {
      e.preventDefault();
      loadRoute($(this).attr('id').replace(/[^0-9]/g, ''));
   });
   $('#js-save').click(function(e) {
      e.preventDefault();
      $('#js-message').text('Saving...');
      $.ajax('maps.php', {
         data: {
            op: 1,
            routeid: route_id,
            route: google.maps.geometry.encoding.encodePath(points),
            name: $('#js-name').val(),
            progress: $('#js-progress').val(),
            unit: $('#js-unit').val()
         },
         type: 'post',
         dataType: 'json'
      })
      .done(function(data) {
         $('#js-message').text((data.response === 'saved') ? '' : 'Save failed');
      })
      .fail(function() {
         $('#js-message').text('Save failed');
      });
   });
   google.maps.event.addDomListener(document.getElementById('js-view'), 'click', function() {
      redrawProgress();
   });
   google.maps.event.addDomListener(document.getElementById('js-edit'), 'click', function() {
      if (polyline.getEditable()) {
         polyline.setEditable(false);
         var marker;
         for (var i in markers) {
            marker = markers[i];
            marker.setVisible(false);
         }
         document.getElementById('js-edit').innerHTML = 'View Mode';
      } else {
         polyline.setEditable(true);
         var marker;
         for (var i in markers) {
            marker = markers[i];
            marker.setVisible(true);
         }
         document.getElementById('js-edit').innerHTML = 'Edit Mode';
      }
   });
   google.maps.event.addDomListener(polyline, 'dblclick', function(mev){
      if (mev.vertex !== undefined) {
         polyline.getPath().removeAt(mev.vertex);
         points = polyline.getPath().getArray();
         if (mev.vertex === 0) {
            if (points.length > 0) {
               markers[0].setPosition(points[0]);
               if (points.length === 1) {
                  markers[1].setMap(null);
               }
            } else {
               markers[0].setMap(null);
            }
         } else if (mev.vertex === points.length) {
            if (points.length > 0) {
               if (points.length === 1) {
                  markers[1].setMap(null);
               } else {
                  markers[1].setPosition(points[points.length - 1]);
               }
            } else {
               markers[1].setMap(null);
            }
         }
         redrawLine();
      }
   });
   google.maps.event.addDomListener(document.getElementById('js-unit'), 'change', function() {
      redrawLine();
   });
   $('#js-new').click(function() {
      route_id = 0;
   });
   loadRoutes();
   loadRoute(0);
}
google.maps.event.addDomListener(window, 'load', initialize);
</script>
</head>
<body>
<div id="map-canvas"></div>
<p>Distance: <span id="js-distance">0 m</span></p>
<button id="js-zoom">Zoom</button>
<button id="js-delete">Delete</button>
<button id="js-clear">Clear</button>
<span id="js-message"></span>
<button id="js-save">Save</button>
<input type="text" id="js-progress" name="progress" />
<button id="js-view">View</button>
<button id="js-edit">Edit Mode</button>
<select id="js-unit" name="unit">
   <option value="miles">Miles</option>
   <option value="km">Kilometres</option>
</select>
<input type="text" id="js-name" name="name" />
<div id="js-routes"></div>
<p><a id="js-route1" class="js-load" href="#">Load 1</a></p>
<p><a id="js-route2" class="js-load" href="#">Load 2</a></p>
<p><a id="js-route3" class="js-load" href="#">Load 3</a></p>
<button id="js-new">New Route</button>
</body>
</html>